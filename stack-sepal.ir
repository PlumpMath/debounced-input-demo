{:definitions {"debounced-input-demo.comp.widget/time-gap" ["def" "time-gap" "500"], "debounced-input-demo.main/dispatch!" ["defn" "dispatch!" ["op" "op-data"]], "debounced-input-demo.main/ssr-stages" ["def" "ssr-stages" ["let" [["ssr-element" [".querySelector" "js/document" "|#ssr-stages"]] ["ssr-markup" [".getAttribute" "ssr-element" "|content"]]] ["read-string" "ssr-markup"]]], "debounced-input-demo.main/-main!" ["defn" "-main!" [] ["enable-console-print!"] ["if" ["not" ["empty?" "ssr-stages"]] ["let" [["target" [".querySelector" "js/document" "|#app"]]] ["falsify-stage!" "target" ["mute-element" ["render-element" ["comp-container" "@store-ref" "ssr-stages"] "states-ref"]] "dispatch!"]]] ["render-app!"] ["add-watch" "store-ref" ":changes" "render-app!"] ["add-watch" "states-ref" ":changes" "render-app!"] ["println" "|app started!"]], "debounced-input-demo.main/states-ref" ["defonce" "states-ref" ["atom" ["{}"]]], "debounced-input-demo.comp.widget/on-input" ["defn" "on-input" ["state" "mutate!"] ["println" "|render event"] ["fn" ["e" "dispatch!"] ["let" [["text" [":text" "state"]] ["input-chan" [":chan" "state"]] ["the-chan" ["if" ["some?" "input-chan"] "input-chan" ["setup-chan!" "text" "mutate!"]]]] ["go" ["println" "|putting new value" ["pr-str" [":value" "e"]]] [">!" "the-chan" [":value" "e"]]]]]], "debounced-input-demo.comp.container/render" ["defn" "render" [] ["fn" ["state" "mutate!"] ["div" ["{}" [":style" ["merge" "ui/global" ["{}" [":padding" "16"]]]]] ["comp-widget"]]]], "debounced-input-demo.comp.widget/init-state" ["defn" "init-state" ["&" "args"] ["{}" [":text" "|"] [":chan" "nil"]]], "debounced-input-demo.comp.container/comp-container" ["def" "comp-container" ["create-comp" ":container" "render"]], "debounced-input-demo.comp.widget/update-state" ["defn" "update-state" ["state" "new-state"] ["merge" "state" "new-state"]], "debounced-input-demo.comp.widget/setup-chan!" ["defn" "setup-chan!" ["text" "mutate!"] ["let" [["the-chan" ["chan"]] ["timeout-ch" ["timeout" "time-gap"]]] ["println" "|created chan."] ["mutate!" ["{}" [":chan" "the-chan"]]] ["go-loop" ["[]" "current-text" "text" "time-ch" "timeout-ch"] ["println" "|waiting for a value"] ["let" [[["[]" "v" "c"] ["alts!" ["[]" "the-chan" "time-ch"]]]] ["if" ["=" "c" "time-ch"] ["do" ["println" "|timeout, destrying all"] ["close!" "the-chan"] ["mutate!" ["{}" [":chan" "nil"] [":text" "current-text"]]]] ["if" ["nil?" "v"] ["do" ["println" "|closed, nil"] "nil"] ["do" ["println" "|new value" ["pr-str" "v"] ["pr-str" "current-text"]] ["if" ["=" "v" "current-text"] ["recur" "v" "time-ch"] ["recur" "v" ["timeout" "time-gap"]]]]]]]] "the-chan"]], "debounced-input-demo.comp.widget/render" ["defn" "render" [] ["fn" ["state" "mutate!"] ["div" ["{}"] ["div" ["{}"] ["comp-text" "|This is a demo of a debounced input box." "nil"] ["comp-space" "8" "nil"] ["a" ["{}" [":attrs" ["{}" [":href" "|https://github.com/Respo/debounced-input-demo"] [":inner-text" "|Find more on GitHub"] [":target" "|_black"]]]]]] ["div" ["{}"] ["input" ["{}" [":attrs" ["{}" [":placeholder" "|Type here..."]]] [":style" ["merge" "ui/input" ["{}" [":width" "400"]]]] [":event" ["{}" [":input" ["on-input" "state" "mutate!"]]]]]] ["comp-space" "16" "nil"] ["if" ["some?" [":chan" "state"]] ["comp-text" "|Typing. The gap is 500ms." "nil"]]] ["div" ["{}"] ["comp-text" [":text" "state"] "nil"]]]]], "debounced-input-demo.main/store-ref" ["defonce" "store-ref" ["atom" ["{}"]]], "debounced-input-demo.main/on-jsload!" ["defn" "on-jsload!" [] ["clear-cache!"] ["render-app!"] ["println" "|code update."]], "debounced-input-demo.comp.widget/comp-widget" ["def" "comp-widget" ["create-comp" ":widget" "init-state" "update-state" "render"]], "debounced-input-demo.main/render-app!" ["defn" "render-app!" [] ["let" [["target" [".querySelector" "js/document" "|#app"]]] ["render!" ["comp-container" "@store-ref"] "target" "dispatch!" "states-ref"]]]}, :namespaces {"debounced-input-demo.comp.container" ["ns" "debounced-input-demo.comp.container" [":require" ["[]" "hsl.core" ":refer" ["[]" "hsl"]] ["[]" "respo-ui.style" ":as" "ui"] ["[]" "respo.alias" ":refer" ["[]" "create-comp" "div" "span"]] ["[]" "respo.comp.space" ":refer" ["[]" "comp-space"]] ["[]" "respo.comp.text" ":refer" ["[]" "comp-text"]] ["[]" "debounced-input-demo.comp.widget" ":refer" ["[]" "comp-widget"]]]], "debounced-input-demo.main" ["ns" "debounced-input-demo.main" [":require" ["[]" "respo.core" ":refer" ["[]" "render!" "clear-cache!" "falsify-stage!" "render-element"]] ["[]" "respo.util.format" ":refer" ["[]" "mute-element"]] ["[]" "debounced-input-demo.comp.container" ":refer" ["[]" "comp-container"]] ["[]" "cljs.reader" ":refer" ["[]" "read-string"]]]], "debounced-input-demo.comp.widget" ["ns" "debounced-input-demo.comp.widget" [":require" ["[]" "respo.alias" ":refer" ["[]" "create-comp" "div" "input" "span" "a"]] ["[]" "respo.comp.text" ":refer" ["[]" "comp-text"]] ["[]" "respo.comp.space" ":refer" ["[]" "comp-space"]] ["[]" "respo-ui.style" ":as" "ui"] ["[]" "cljs.core.async" ":refer" ["[]" "chan" "<!" ">!" "timeout" "close!" "alts!"]]] [":require-macros" ["[]" "cljs.core.async.macros" ":refer" ["[]" "go" "go-loop"]]]]}, :procedures {"debounced-input-demo.main" [["set!" [".-onload" "js/window"] "-main!"]], "debounced-input-demo.comp.widget" []}}